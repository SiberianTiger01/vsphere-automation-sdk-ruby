#!/usr/bin/env ruby

require 'bundler/setup'
require 'optparse'
require 'vsphere-automation-vcenter'
require 'vsphere-automation-cis'
 
options = { insecure: false }
OptionParser.new do |opts|
  opts.on('-s SERVER', '--server SERVER', 'vCenter server to use') do |s|
    options[:server] = s
  end
 
  opts.on('-u USERNAME', '--username USERNAME', 'username to use') do |u|
    options[:username] = u
  end
 
  opts.on('-p PASSWORD', '--password PASSWORD', 'password to use') do |p|
    options[:password] = p
  end
 
  opts.on('-k', '--insecure', 'skip certificate validation') do |k|
    options[:insecure] = k
  end
 
  opts.on('-n NAME', '--name NAME', 'name to use') do |n|
    options[:name] = n
  end
 
  opts.on('-d DESCRIPTION', '--description DESCRIPTION', 'description to use') do |d|
    options[:description] = d
  end
 
  opts.on('-c CATEGORY_ID', '--category-id CATEGORY_ID', 'category to use') do |c|
    options[:category_id] = c
  end
end.parse!
 
configuration = VSphereAutomation::Configuration.new.tap do |c|
    c.host = options[:server]
    c.username = options[:username]
    c.password = options[:password]
    c.scheme = 'https'
    c.verify_ssl = !options[:insecure]
    c.verify_ssl_host = !options[:insecure]
  end
api_client = VSphereAutomation::ApiClient.new(configuration)
api_client.default_headers['Authorization'] = configuration.basic_auth_token
 
session_api = VSphereAutomation::CIS::SessionApi.new(api_client)
session_id = session_api.create('').value
 
api_client.default_headers['vmware-api-session-id'] = session_id
 
api_instance = VSphereAutomation::CIS::TaggingTagApi.new(api_client)

create_spec =  VSphereAutomation::CIS::CisTaggingTagCreateSpec.new(
  name: options[:name],
  description: options[:description],
  category_id: options[:category_id]
)
create_model = VSphereAutomation::CIS::CisTaggingTagCreate.new(create_spec: create_spec)

result = api_instance.create(cis_tagging_tag_create: create_model).value

puts "Tag ID: #{result}"